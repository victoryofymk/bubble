<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>bubble-springboot</artifactId>
        <groupId>com.it.ymk</groupId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>

    <artifactId>bubble-springboot-web</artifactId>
    <version>1.0.0-SNAPSHOT</version>

    <properties>
        <docker.image.prefix>wondershoter</docker.image.prefix>
        <!--set the following false to make images-->
        <docker.skip.build>false</docker.skip.build>
        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.it.ymk</groupId>
            <artifactId>bubble-dao</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.it.ymk</groupId>
            <artifactId>bubble-component-schedule</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.it.ymk</groupId>
            <artifactId>bubble-component-shiro</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.it.ymk</groupId>
            <artifactId>bubble-component-manage</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>com.it.ymk</groupId>
            <artifactId>bubble-core</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <!--数据源-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.23</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.32</version>
        </dependency>
        <!--依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        <!--admin客户端-->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>2.0.3</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <!--redis日志收集-->
        <dependency>
            <groupId>com.cwbase</groupId>
            <artifactId>logback-redis-appender</artifactId>
            <version>1.1.5</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.5</version>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!--Generate Git Information-->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>
            <!--Spring boot maven plugin-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--该配置必须-->
                    <fork>true</fork>
                </configuration>
            </plugin>
            <!-- 编译、打包Docker镜像并push到DockerHub上
                 Docker maven plugin：docker的maven插件，dockerfile-maven的前身
                 官网：https://github.com/spotify/docker-maven-plugin
                 执行：mvn package docker:build，mvn docker:push
            -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.1.1</version>
                <!--插件绑定到phase-->
                <!--用户只需要执行mvn install ，就自动执行了mvn docker:build-->
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--配置变量，包括是否build、imageName、imageTag，非常灵活-->
                    <skipDocker>${docker.skip.build}</skipDocker>
                    <!-- 注意imageName一定要是符合正则[a-z0-9-_.]的，否则构建不会成功 -->
                    <!-- 详见：https://github.com/spotify/docker-maven-plugin Invalid repository
			             name ... only [a-z0-9-_.] are allowed -->
                    <!-- 如果要将docker镜像push到DockerHub上去的话，这边的路径要和repo路径一致 -->
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <!--最后镜像产生了两个tag，版本和和最新的-->
                    <imageTags>
                        <imageTag>${project.version}</imageTag>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <forceTags>true</forceTags>
                    <env>
                        <TZ>Asia/Shanghai</TZ>
                    </env>
                    <!--时区配置-->
                    <runs>
                        <run>ln -snf /usr/share/zoneinfo/$TZ /etc/localtime</run>
                        <run>echo $TZ > /etc/timezone</run>
                    </runs>
                    <!-- 指定Dockerfile所在的路径 -->
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <!--<dockerDirectory>${project.basedir}</dockerDirectory>-->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <!--push到DockerHub，serverId配置在MAVEN setting.xml servers 节点下下-->
                    <serverId>docker-hub</serverId>
                    <registryUrl>https://index.docker.io/v1/</registryUrl>
                </configuration>
            </plugin>
            <!-- 编译、打包Docker镜像并push到DockerHub上
                 dockerfile-maven：docker的maven插件，推荐
                 官网：https://github.com/spotify/dockerfile-maven
                 执行： mvn dockerfile:build,mvn dockerfile:push
            -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.4</version>
                <!--放开这块注释，则运行mvn deploy命令就会打包镜像-->
                <executions>
                    <execution>
                        <id>default</id>
                        <phase>install</phase>
                        <goals>
                            <goal>build</goal>
                            <!--<goal>push</goal>-->
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <contextDirectory>${project.basedir}</contextDirectory>
                    <tag>${project.version}</tag>
                    <tag>latest</tag>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                    <!--指定了远程镜像地址，这个在 Docker Hub 中是唯一的-->
                    <repository>${docker.image.prefix}/${project.artifactId}</repository>
                    <!--<repository>wondershoter/bubble-springboot</repository>-->
                    <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>