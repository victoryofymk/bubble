<?xml version="1.0" encoding="UTF-8" ?>
<!--scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!--debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<!--
1.子节点<contextName>：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。
　　    例如：
    　　　　<configuration scan="true" scanPeriod="60 seconds" debug="false">
    　　　　　　<contextName>myAppName</contextName>
    　　　　</configuration>
2.子节点<property>	：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。
    　　　　name: 变量的名称
    　　　　value: 的值时变量定义的值
    　　例如：
    　　　　<configuration scan="true" scanPeriod="60 seconds" debug="false">
            　　　　　　<property name="APP_Name" value="myAppName" />
            　　　　　　<contextName>${APP_Name}</contextName>
    　　　　</configuration>
3.子节点<timestamp>：获取时间戳字符串，他有两个属性key和datePattern
　　　　key: 标识此<timestamp> 的名字；
　　　　datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
    　　例如：
    　　　　<configuration scan="true" scanPeriod="60 seconds" debug="false">
        　　　　　　<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>
        　　　　　　<contextName>${bySecond}</contextName>
    　　　　</configuration>
4.子节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
　　　　5.1、ConsoleAppender 把日志输出到控制台，有以下子节点：
　　　　　　<encoder>：对日志进行格式化。（具体参数稍后讲解 ）
　　　　　　<target>：字符串System.out(默认)或者System.err（区别不多说了）
　　　　例如：
    　　　　<configuration>
    　　　　　　<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        　　　　　　<encoder>
        　　　　　　　　<pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
        　　　　　　</encoder>
    　　　　　　</appender>
    　　　　　　<root level="DEBUG">
    　　　　　　　　<appender-ref ref="STDOUT" />
    　　　　　　</root>
    　　　　</configuration>
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 日志根目录-->
    <springProperty scope="context" name="LOG_HOME" source="logging.path"
                    defaultValue="/Users/yanmingkun/IdeaProjects/opt/ymk/product/bubble/logs"/>
    <!-- 日志级别 -->
    <springProperty scope="context" name="LOG_ROOT_LEVEL" source="logging.level.root" defaultValue="DEBUG"/>

    <!--  标识这个"STDOUT" 将会添加到这个logger -->
    <!--<springProperty scope="context" name="STDOUT" source="log.stdout" defaultValue="STDOUT"/>-->

    <!--根据系统设定日志路径，LOG_PATH未使用，依赖Janino library-->
    <property name="OS_NAME" value="${os.name}"/>
    <!--<if condition='property("OS_NAME").contains("Windows")'>-->
    <!--<then>-->
    <!--<property name="LOG_PATH" value="${LOG_PATH:-E:/logs}"/>-->
    <!--</then>-->
    <!--<else>-->
    <!--<property name="LOG_PATH" value="${LOG_PATH:-/log}"/>-->
    <!--</else>-->
    <!--</if>-->

    <!-- 日志文件名称-->
    <property name="LOG_PREFIX" value="spring-boot-logback"/>
    <!-- 日志文件编码-->
    <property name="LOG_CHARSET" value="UTF-8"/>
    <!-- 日志文件路径+日期-->
    <property name="LOG_DIR" value="${LOG_HOME}/%d{yyyyMMdd}"/>

    <!--springboot 日志默认格式-->
    <property name="DEFAULT_LOG_MSG"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%15.15t] %-40.40logger{39} : %m%n"/>

    <!--日志自定义格式-->
    <property name="LOG_MSG"
              value="- | [%X{requestUUID}] | [%d{yyyyMMdd HH:mm:ss.SSS}] | [%level] | [${HOSTNAME}] | [%thread] | [%logger{36}] | --> %msg|%n "/>
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--文件切割大小，默认10MB-->
    <property name="MAX_FILE_SIZE" value="50MB"/>
    <!-- 配置日志的滚动时间 ，表示只保留最近 10 天的日志-->
    <property name="MAX_HISTORY" value="10"/>

    <!--  控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                <!--[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %logger{36} - %msg%n-->
                ${CONSOLE_LOG_PATTERN}
            </pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--  INFO日志 -->
    <!--子节点
            <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
            <prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
    -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_HOME}/info/info.log</file>

        <!--<rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类-->
        <!--
            class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
            class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:
                <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。
                如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
                如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。-->
            <fileNamePattern>${LOG_HOME}/info/info.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--<triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
                <minIndex>:窗口索引最小值
　　　　　　　    <maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
　　　　　　　　  <fileNamePattern>:必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--这是活动文件的大小，默认值是10MB。-->
                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。 -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!--<encoder>：对记录事件进行格式化。负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。
            PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<pattern>节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。-->
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{100} - %msg%n
            </pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--  DEBUG日志 -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/debug/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOG_HOME}/debug/debug.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- keep 30 days worth of history -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{100} - %msg%n
            </pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--  WARN日志 -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/warn/warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOG_HOME}/warn/warn.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- keep 30 days worth of history -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{100} - %msg%n
            </pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--  ERROR日志 -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/error/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOG_HOME}/error/error.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- keep 30 days worth of history -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{100} - %msg%n
            </pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--  SQL日志 -->
    <appender name="SQL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/sql/sql.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <fileNamePattern>${LOG_HOME}/sql/sql.%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- keep 30 days worth of history -->
            <maxHistory>${MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{100} - %msg%n
            </pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--  redis日志 -->
    <appender name="LOGSTASH" class="com.cwbase.logback.RedisAppender">
        <source>mySource</source>
        <sourcePath>mySourcePath</sourcePath>
        <type>bubble</type>
        <tags>local</tags>
        <host>10.12.12.107</host>
        <port>6379</port>
        <password>redis_sax</password>
        <!-- 这个Key是Redis List的Key，需要和Logstash读取Redis的Key匹配 -->
        <key>logstash</key>中
    </appender>

    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="LOGSTASH"/>
    </appender>

    <!--设置某一个包或具体的某一个类的日志打印级别
        name: 用来指定受此loger约束的某一个包或者具体的某一个类。
　　　　 level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity: 是否向上级loger传递打印信息。默认是true。同<loger>一样，可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
    -->
    <springProfile name="dev">
        <!-- 开发环境时激活 -->
        <logger name="com.it.ymk.bubble" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.apache.commons" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.mybatis" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.apache.ibatis" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="java.sql" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.alibaba.druid" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.hibernate" level="DEBUG" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>
    </springProfile>

    <springProfile name="dev,test">
        <!-- 开发，测试的时候激活-->
    </springProfile>

    <springProfile name="prod">
        <!-- 当 "生产" 环境时，该配置激活-->
        <logger name="org.apache.commons" level="DEBUG" additivity="false">
            <appender-ref ref="DEBUG"/>
        </logger>
        <logger name="org.mybatis" level="DEBUG" additivity="false">
            <appender-ref ref="SQL"/>
        </logger>
        <logger name="org.apache.ibatis" level="DEBUG" additivity="false">
            <appender-ref ref="SQL"/>
        </logger>
        <logger name="java.sql" level="DEBUG" additivity="false">
            <appender-ref ref="SQL"/>
        </logger>
        <logger name="com.alibaba.druid" level="DEBUG" additivity="false">
            <appender-ref ref="SQL"/>
        </logger>
        <logger name="org.hibernate" level="DEBUG" additivity="false">
            <appender-ref ref="SQL"/>
        </logger>
    </springProfile>

    <!-- 子节点<root>:它也是<loger>元素，但是它是根loger,是所有<loger>的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了。
　　　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG。 -->
    <root level="${LOG_ROOT_LEVEL}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="DEBUG"/>
        <appender-ref ref="SQL"/>
        <appender-ref ref="INFO"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="ERROR"/>
        <!--ref="ASYNC"修改为异步-->
        <appender-ref ref="LOGSTASH"/>
    </root>
</configuration>

